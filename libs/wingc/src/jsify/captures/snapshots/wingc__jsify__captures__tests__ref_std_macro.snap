---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    let arr = [1,2,3];\n\n    test \"test\" {\n      assert(arr.length == 3);\n    }\n\t\t\"#)"
---
======================================================
Files:

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $arr_length }) {
  class $Closure1 {
    async handle()  {
      {((cond) => {if (!cond) throw new Error("assertion failed: arr.length == 3")})(($arr_length === 3))};
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

preflight.js
------------------------------------------------------
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const $arr_length = context._lift(arr.length);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        $arr_length: ${$arr_length},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject(arr.length, host, []);
    }
    super._registerBind(host, ops);
  }
}
const arr = Object.freeze([1, 2, 3]);
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

