---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring util;\n    test \"test\" {\n      util.tryEnv(\"PATH\");\n    }\n    \"#)"
---
======================================================
Captured by $Closure1:
Types:
  util.Util = Util

======================================================
Files:

main.w
------------------------------------------------------

    bring util;
    test "test" {
      util.tryEnv("PATH");
    }
    
preflight.js
------------------------------------------------------
const util = require('@winglang/sdk').util;
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const lifted_util_Util = util.Util._toInflightType(context).text;
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        util_Util: ${lifted_util_Util},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ util_Util }) {
  const util = {
    Util: util_Util,
  };
  
  class $Closure1 {
    async $inflight_init()  {
    }
    async handle()  {
      (await util.Util.tryEnv("PATH"));
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

