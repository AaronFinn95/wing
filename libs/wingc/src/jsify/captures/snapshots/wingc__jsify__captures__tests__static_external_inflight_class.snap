---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    inflight class A {\n      static foo() { log(\"hello\"); }\n    }\n\n    test \"test\" {\n      class B {\n        init() {\n          A.foo();\n        }\n      }\n\n      A.foo();\n    }\n    \"#)"
---
======================================================
Captured by A:

======================================================
Captured by $Closure1:
Types:
  A = A

======================================================
Captured by B:
Types:
  A = A

======================================================
Files:

inflight.A.js
------------------------------------------------------
module.exports = function({  }) {
  class A {
     constructor()  {
    }
    static async foo()  {
      {console.log("hello")};
    }
  }
  return A;
}

main.w
------------------------------------------------------

    inflight class A {
      static foo() { log("hello"); }
    }

    test "test" {
      class B {
        init() {
          A.foo();
        }
      }

      A.foo();
    }
    
inflight.B.js
------------------------------------------------------
module.exports = function({ A }) {
  class B {
     constructor()  {
      (await A.foo());
    }
  }
  return B;
}

preflight.js
------------------------------------------------------
class A extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("foo");
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.A.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${A._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const lifted_A = A._toInflightType(context).text;
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        A: ${lifted_A},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ A }) {
  class $Closure1 {
    async $inflight_init()  {
    }
    async handle()  {
      const B = require("./inflight.B.js")({A});
      (await A.foo());
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

