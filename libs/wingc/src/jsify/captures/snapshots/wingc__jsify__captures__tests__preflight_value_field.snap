---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    class MyType {\n      name: str;\n      last: str;\n\n      init() {\n        this.name = \"hello\";\n        this.last = \"world\";\n      }\n    }\n\n    let t = new MyType();\n\n    test \"test\" {\n      log(t.name);\n      assert(t.name.length > 0);\n      log(t.last);\n    }\n    \"#)"
---
======================================================
Captured by MyType:

======================================================
Captured by $Closure1:
Variables:
  handle():
    t.last => []
    t.name => []

======================================================
Files:

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ t_last, t_name }) {
  const t = {
    last: t_last,
    name: t_name,
  };
  
  class $Closure1 {
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle()  {
      {console.log(t.name)};
      {((cond) => {if (!cond) throw new Error(`assertion failed: '(t.name.length > 0)'`)})((t.name.length > 0))};
      {console.log(t.last)};
    }
    async $inflight_init()  {
    }
  }
  return $Closure1;
}

main.w
------------------------------------------------------

    class MyType {
      name: str;
      last: str;

      init() {
        this.name = "hello";
        this.last = "world";
      }
    }

    let t = new MyType();

    test "test" {
      log(t.name);
      assert(t.name.length > 0);
      log(t.last);
    }
    
preflight.js
------------------------------------------------------
class MyType extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("$inflight_init");
    this.name = "hello";
    this.last = "world";
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.MyType.js")({
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const MyTypeClient = ${MyType._toInflightType(this).text};
        const client = new MyTypeClient({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle", "$inflight_init");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({
        t_last: ${context._lift(t.last, [])},
        t_name: ${context._lift(t.name, [])},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const $Closure1Client = ${$Closure1._toInflightType(this).text};
        const client = new $Closure1Client({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject(t.last, host, []);
      $Closure1._registerBindObject(t.name, host, []);
    }
    super._registerBind(host, ops);
  }
}
const t = new MyType(this,"MyType");
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.MyType.js
------------------------------------------------------
module.exports = function({  }) {
  class MyType {
    constructor({  }) {
    }
    async $inflight_init()  {
    }
  }
  return MyType;
}

