---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    let a = [\"hello\", \"world\"];\n    test \"test\" {\n      assert(a.length == 2);\n      log(a.at(0));\n    }\n    \"#)"
---
======================================================
Captured by $Closure1:

======================================================
Files:

main.w
------------------------------------------------------

    let a = ["hello", "world"];
    test "test" {
      assert(a.length == 2);
      log(a.at(0));
    }
    
preflight.js
------------------------------------------------------
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const $_a_at_0__ = context._lift((a.at(0)));
    const $a_length = context._lift(a.length);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        $_a_at_0__: ${$_a_at_0__},
        $a_length: ${$a_length},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject((a.at(0)), host, []);
      $Closure1._registerBindObject(a.length, host, []);
    }
    super._registerBind(host, ops);
  }
}
const a = Object.freeze(["hello", "world"]);
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $_a_at_0__, $a_length }) {
  class $Closure1 {
    async $inflight_init()  {
    }
    async handle()  {
      {((cond) => {if (!cond) throw new Error("assertion failed: a.length == 2")})(($a_length === 2))};
      {console.log($_a_at_0__)};
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

