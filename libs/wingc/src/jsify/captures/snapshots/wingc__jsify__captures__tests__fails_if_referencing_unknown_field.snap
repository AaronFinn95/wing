---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_fail(r#\"\n\t\tclass MyInflightClass {\n      inflight putInBucket() {\n        this.b.put(\"in\", \"bucket\");\n      }\n    }\n\t\t\"#)"
---
======================================================
Errors:
 - at 3:13 | Unknown symbol "b"
======================================================
Files:

inflight.MyInflightClass.js
------------------------------------------------------
module.exports = function({  }) {
  class MyInflightClass {
    async putInBucket()  {
      (await this.$this_b.put("in","bucket"));
    }
    constructor({ $this_b }) {
      this.$this_b = $this_b;
    }
  }
  return MyInflightClass;
}

preflight.js
------------------------------------------------------
class MyInflightClass extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("putInBucket");
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.MyInflightClass.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${MyInflightClass._toInflightType(this).text})({
          $this_b: ${this._lift(this.b)},
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("putInBucket")) {
      MyInflightClass._registerBindObject(this.b, host, ["put"]);
    }
    super._registerBind(host, ops);
  }
}

