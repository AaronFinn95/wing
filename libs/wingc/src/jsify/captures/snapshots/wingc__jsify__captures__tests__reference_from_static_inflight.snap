---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    let s = \"hello\";\n\n    class MyType {\n      static inflight staticMethod(): str {\n        return s;\n      }\n    }\n    \"#)"
---
======================================================
Captured by MyType:

======================================================
Files:

main.w
------------------------------------------------------

    let s = "hello";

    class MyType {
      static inflight staticMethod(): str {
        return s;
      }
    }
    
preflight.js
------------------------------------------------------
class MyType extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("staticMethod");
  }
  static _toInflightType(context) {
    const $s = context._lift(s);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.MyType.js")({ 
        $s: ${$s},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${MyType._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  static _registerTypeBind(host, ops) {
    if (ops.includes("staticMethod")) {
      MyType._registerBindObject(s, host, []);
    }
    super._registerTypeBind(host, ops);
  }
}
const s = "hello";

inflight.MyType.js
------------------------------------------------------
module.exports = function({ $s }) {
  class MyType {
    async $inflight_init()  {
    }
    static async staticMethod()  {
      return $s;
    }
    constructor({  }) {
    }
  }
  return MyType;
}

