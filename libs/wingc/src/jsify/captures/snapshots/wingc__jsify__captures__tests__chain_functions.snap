---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n\n    class Foo {\n      b: cloud.Bucket;\n\n      init() {\n        this.b = new cloud.Bucket();\n      }\n\n      inflight getBucket(): cloud.Bucket {\n        return this.b;\n      }\n    }\n\n    let f = new Foo();\n    let b = new cloud.Bucket();\n\n    test \"test\" {\n      f.getBucket().put(\"hello\", \"world\");\n    }\n    \"#)"
---
======================================================
Captured by Foo:

======================================================
Captured by $Closure1:

======================================================
Files:

inflight.Foo.js
------------------------------------------------------
module.exports = function({  }) {
  class Foo {
    async $inflight_init()  {
    }
    async getBucket()  {
      return this.$this_b;
    }
    constructor({ $this_b }) {
      this.$this_b = $this_b;
    }
  }
  return Foo;
}

main.w
------------------------------------------------------

    bring cloud;

    class Foo {
      b: cloud.Bucket;

      init() {
        this.b = new cloud.Bucket();
      }

      inflight getBucket(): cloud.Bucket {
        return this.b;
      }
    }

    let f = new Foo();
    let b = new cloud.Bucket();

    test "test" {
      f.getBucket().put("hello", "world");
    }
    
preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class Foo extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("getBucket");
    this.b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.Foo.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${Foo._toInflightType(this).text})({
          $this_b: ${this._lift(this.b)},
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("getBucket")) {
      Foo._registerBindObject(this.b, host, []);
    }
    super._registerBind(host, ops);
  }
}
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const $f = context._lift(f);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        $f: ${$f},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject(f, host, ["getBucket"]);
    }
    super._registerBind(host, ops);
  }
}
const f = new Foo(this,"Foo");
const b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $f }) {
  class $Closure1 {
    async $inflight_init()  {
    }
    async handle()  {
      (await (await $f.getBucket()).put("hello","world"));
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

