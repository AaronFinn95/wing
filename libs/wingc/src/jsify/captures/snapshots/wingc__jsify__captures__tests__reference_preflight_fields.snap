---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n    \n\t\tclass MyType {\n      s: str;\n      b: cloud.Bucket;\n\n      init() { \n        this.s = \"hello\"; \n        this.b = new cloud.Bucket();\n      }\n\n      inflight boom() {\n        assert(this.s.length > 0);\n        assert(this.b.list().length > 0);\n      }\n\n      inflight bam() {\n        this.b.put(\"hello\", \"world\");\n        this.b.get(\"aaa\");\n      }\n    }\n\t\t\"#)"
---
======================================================
Files:

inflight.MyType.js
------------------------------------------------------
module.exports = function({  }) {
  class MyType {
    async boom()  {
      {((cond) => {if (!cond) throw new Error("assertion failed: this.s.length > 0")})((this.$this_s_length > 0))};
      {((cond) => {if (!cond) throw new Error("assertion failed: this.b.list().length > 0")})(((await this.$this_b.list()).length > 0))};
    }
    async bam()  {
      (await this.$this_b.put("hello","world"));
      (await this.$this_b.get("aaa"));
    }
    constructor({ $this_b, $this_s_length }) {
      this.$this_b = $this_b;
      this.$this_s_length = $this_s_length;
    }
  }
  return MyType;
}

preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class MyType extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("boom", "bam");
    this.s = "hello";
    this.b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.MyType.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${MyType._toInflightType(this).text})({
          $this_b: ${this._lift(this.b)},
          $this_s_length: ${this._lift(this.s.length)},
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("bam")) {
      MyType._registerBindObject(this.b, host, ["get", "list", "put"]);
    }
    if (ops.includes("boom")) {
      MyType._registerBindObject(this.s.length, host, []);
    }
    super._registerBind(host, ops);
  }
}

