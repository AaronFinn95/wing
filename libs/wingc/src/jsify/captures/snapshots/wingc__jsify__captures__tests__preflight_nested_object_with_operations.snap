---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n    let b = new cloud.Bucket();\n    class A {\n      bucky: cloud.Bucket;\n      init() {\n        this.bucky = b;\n      }\n    }\n\n    let a = new A();\n    test \"test\" {\n      a.bucky.list();\n    } \n    \"#)"
---
======================================================
Captured by A:

======================================================
Captured by $Closure1:

======================================================
Files:

inflight.A.js
------------------------------------------------------
module.exports = function({  }) {
  class A {
    async $inflight_init()  {
    }
    constructor({  }) {
    }
  }
  return A;
}

main.w
------------------------------------------------------

    bring cloud;
    let b = new cloud.Bucket();
    class A {
      bucky: cloud.Bucket;
      init() {
        this.bucky = b;
      }
    }

    let a = new A();
    test "test" {
      a.bucky.list();
    } 
    
preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class A extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this.bucky = b;
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.A.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${A._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const $a_bucky = context._lift(a.bucky);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        $a_bucky: ${$a_bucky},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject(a.bucky, host, ["list"]);
    }
    super._registerBind(host, ops);
  }
}
const b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
const a = new A(this,"A");
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $a_bucky }) {
  class $Closure1 {
    async $inflight_init()  {
    }
    async handle()  {
      (await $a_bucky.list());
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

