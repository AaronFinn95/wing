---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n\n    let b = new cloud.Bucket();\n\n    class MyType {\n      static inflight staticMethod(): str {\n        b.list();\n        return \"foo\";\n      }\n    }\n\n    test \"test\" {\n      log(MyType.staticMethod());\n    }\n    \"#)"
---
======================================================
Files:

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ MyType }) {
  class $Closure1 {
    async handle()  {
      {console.log((await MyType.staticMethod()))};
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

inflight.MyType.js
------------------------------------------------------
module.exports = function({ $b }) {
  class MyType {
    static async staticMethod()  {
      (await $b.list());
      return "foo";
    }
    constructor({  }) {
    }
  }
  return MyType;
}

preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class MyType extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("staticMethod");
  }
  static _toInflightType(context) {
    const $b = context._lift(b);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.MyType.js")({ 
        $b: ${$b},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${MyType._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  static _registerTypeBind(host, ops) {
    if (ops.includes("staticMethod")) {
      MyType._registerBindObject(b, host, ["list"]);
    }
    super._registerTypeBind(host, ops);
  }
}
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const lifted_MyType = MyType._toInflightType(context).text;
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        MyType: ${lifted_MyType},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}
const b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

