---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n    class Foo {\n      b: cloud.Bucket;\n      q: cloud.Queue;\n\n      init() {\n        this.b = new cloud.Bucket();\n        this.q = new cloud.Queue();\n\n        this.q.setConsumer(inflight () => {\n          this.b.put(\"in\", \"bucket\");\n        });\n      }\n    }\n    \"#)"
---
======================================================
Files:

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $__parent_this_1_b }) {
  class $Closure1 {
    async handle()  {
      (await $__parent_this_1_b.put("in","bucket"));
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

inflight.Foo.js
------------------------------------------------------
module.exports = function({  }) {
  class Foo {
    constructor({  }) {
    }
  }
  return Foo;
}

preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class Foo extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this.b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
    this.q = this.node.root.newAbstract("@winglang/sdk.cloud.Queue",this,"cloud.Queue");
    const __parent_this_1 = this;
    class $Closure1 extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
        this._addInflightOps("handle");
        this.display.hidden = true;
      }
      static _toInflightType(context) {
        const $__parent_this_1_b = context._lift(__parent_this_1.b);
        return $stdlib.core.NodeJsCode.fromInline(`
          require("./inflight.$Closure1.js")({ 
            $__parent_this_1_b: ${$__parent_this_1_b},
          })
        `);
      }
      _toInflight() {
        return $stdlib.core.NodeJsCode.fromInline(`
          (await (async () => {
            const client = new (${$Closure1._toInflightType(this).text})({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `);
      }
      _registerBind(host, ops) {
        if (ops.includes("handle")) {
          $Closure1._registerBindObject(__parent_this_1.b, host, ["put"]);
        }
        super._registerBind(host, ops);
      }
    }
    (this.q.setConsumer(new $Closure1(this,"$Closure1")));
  }
  static _toInflightType(context) {
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.Foo.js")({ 
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${Foo._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
}

