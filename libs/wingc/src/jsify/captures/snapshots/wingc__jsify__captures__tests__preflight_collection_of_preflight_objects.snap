---
source: libs/wingc/src/jsify/captures/tests.rs
expression: "capture_ok(r#\"\n    bring cloud;\n    let arr = [\n      new cloud.Bucket() as \"b1\",\n      new cloud.Bucket() as \"b2\"\n    ];\n    test \"test\" {\n      assert(arr.length == 2);\n      let b = arr.at(0);\n      b.put(\"hello\", \"world\");\n    }\n    \"#)"
---
======================================================
Files:

inflight.$Closure1.js
------------------------------------------------------
module.exports = function({ $_arr_at_0__, $arr_length }) {
  class $Closure1 {
    async handle()  {
      {((cond) => {if (!cond) throw new Error("assertion failed: arr.length == 2")})(($arr_length === 2))};
      const b = $_arr_at_0__;
      (await b.put("hello","world"));
    }
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
  }
  return $Closure1;
}

preflight.js
------------------------------------------------------
const cloud = require('@winglang/sdk').cloud;
class $Closure1 extends $stdlib.std.Resource {
  constructor(scope, id, ) {
    super(scope, id);
    this._addInflightOps("handle");
    this.display.hidden = true;
  }
  static _toInflightType(context) {
    const $_arr_at_0__ = context._lift((arr.at(0)));
    const $arr_length = context._lift(arr.length);
    return $stdlib.core.NodeJsCode.fromInline(`
      require("./inflight.$Closure1.js")({ 
        $_arr_at_0__: ${$_arr_at_0__},
        $arr_length: ${$arr_length},
      })
    `);
  }
  _toInflight() {
    return $stdlib.core.NodeJsCode.fromInline(`
      (await (async () => {
        const client = new (${$Closure1._toInflightType(this).text})({
        });
        if (client.$inflight_init) { await client.$inflight_init(); }
        return client;
      })())
    `);
  }
  _registerBind(host, ops) {
    if (ops.includes("handle")) {
      $Closure1._registerBindObject((arr.at(0)), host, []);
      $Closure1._registerBindObject(arr.length, host, []);
    }
    super._registerBind(host, ops);
  }
}
const arr = Object.freeze([this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"b1"), this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"b2")]);
this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));

